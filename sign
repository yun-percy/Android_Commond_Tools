#!/usr/bin/python
#-*- coding:utf-8 -*-
#此脚本使用在Android 各项处理上
#制作者：振云

import sys
import commands
from common import bcolors
import argparse
import os
import common
import shutil
#-------------参数区---------------------
option=argparse.ArgumentParser(description="This Pyhon Script is used for sign Android apk,the old apk will bakup in /tmp/apk_bak,It's can sign zip package and apks in directories")
option.add_argument('-k',type=str,choices=['platform','testkey','shared','media','zte'],help="<key> Key to use to sign the apk, default is platform key")
# option.add_argument('-l',action='store_true',help="sign all apk in this directory,(include sub directories)")
# option.add_argument('-o',type=str,help='sign one apk')
option.add_argument('files',type=str,help='input apkfiles or directory or zip,')
options=option.parse_args()
signapk_jar='null'
key_pem='null'
key_pk8='null'
apk_bak_folder='/tmp/apk_bak'
#-------------函数区---------------------
def set_signkey():
	global signapk_jar,key_pem,key_pk8
	signapk_jar=common.read_signapk_jar()
	key_path=common.read_key_path()
	# print options.k
	if options.k=='zte':
		key_pem=key_path+'/zte/platform.x509.pem'
		key_pk8=key_path+'/zte/platform.pk8'
		print key_pem,key_pk8
	elif options.k and options.k!='platform':
		key_pem=key_path+'/'+options.k+'.x509.pem'
		key_pk8=key_path+'/'+options.k+'.pk8'
		print key_pem,key_pk8
	else:
		key_pem=key_path+'/platform.x509.pem'
		key_pk8=key_path+'/platform.pk8'
		print key_pem,key_pk8
def sign_apk(apk):
	common.mkdir(apk_bak_folder)
	if not os.path.isfile(apk):
		print bcolors.FAIL+'Error'+bcolors.ENDC+': Can\'t find '+bcolors.OKBLUE+apk+bcolors.ENDC
		sys.exit(1)
	apk_name=common.get_file_name_only(apk)
	# apk_path=os.path.dirname(apk)
	# print apk,apk_path,os.path.dirname(apk)
	apk_path=os.path.abspath(apk)
	apk_path=os.path.dirname(apk_path)
	print 'Signing '+bcolors.OKBLUE+apk+bcolors.ENDC+' ......'
	cmd='java -jar '+signapk_jar+' '+key_pem+' '+key_pk8+' '+apk+' '+apk_path+'/'+apk_name+'_sign.apk'
	print cmd
	(status,output)=commands.getstatusoutput(cmd)
	if status ==0:
		shutil.move(apk, apk_bak_folder+'/'+apk_name+'.apk')
		shutil.move(apk_path+'/'+apk_name+'_sign.apk',apk)
		print 'Sign '+bcolors.OKBLUE+apk+bcolors.OKGREEN+' Done!'+bcolors.ENDC
	else:
		print bcolors.FAIL+'Sign FAIL!'+bcolors.ENDC
		print output
		sys.exit(1)
def sign_zip(zip):
	print 'sign package start'
	if not os.path.isfile(zip):
		print bcolors.FAIL+'Error'+bcolors.ENDC+': Can\'t find '+bcolors.OKBLUE+zip+bcolors.ENDC
		sys.exit(1)
	zip_name=common.get_file_name_only(zip)
	zip_path=os.path.abspath(zip)
	zip_path=os.path.dirname(zip_path)
	print 'Signing '+bcolors.OKBLUE+zip+bcolors.ENDC+' ......'
	cmd='java -jar '+signapk_jar+' '+key_pem+' '+key_pk8+' '+zip+' '+zip_path+'/'+zip_name+'_sign.zip'
	print cmd
	(status,output)=commands.getstatusoutput(cmd)
	if status ==0:
		# shutil.move(zip, apk_bak_folder+'/'+apk_name+'.apk')
		shutil.move(zip_path+'/'+zip_name+'_sign.zip',zip)
		print 'Sign '+bcolors.OKBLUE+zip+bcolors.OKGREEN+' Done!'+bcolors.ENDC
	else:
		print bcolors.FAIL+'Sign FAIL!'+bcolors.ENDC
		print output
		sys.exit(1)
def sign_dir(dirs):
	print 'sign apks in directory'
	for files in os.walk(dirs):
		for i in files[2]:
			if i.find('.apk') != -1:
				apk_path=files[0]+'/'+i
				print apk_path
				sign_apk(apk_path)
				# apk_name=common.get_file_name_only(apk_path)
				# print apk_name
				# print os.path.dirname(apk_path)
#-------------流程区---------------------
target=options.files
set_signkey()
if '.apk' in target:
	sign_apk(target)
elif '.zip' in target:
	sign_zip(target)
elif os.path.isdir(target):
	sign_dir(target)
else :
	print 'please input apk/zip or directory which include apk! '
